package BackendStuff;

//import java.io.Serializable;
import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

public class DatabaseHelperAdapter{
	
	DatabaseHelper database;
	public DatabaseHelperAdapter(Context context){
		database = new DatabaseHelper(context);
	}
	public void insertData(String name, String healthcard, String dob){
		SQLiteDatabase db = database.getWritableDatabase();
		ContentValues contentValues = new ContentValues();
		contentValues.put(DatabaseHelper.NAME, name);
		contentValues.put(DatabaseHelper.HEALTHCARD, healthcard);
		contentValues.put(DatabaseHelper.DOB, dob);
		db.insert(DatabaseHelper.TABLE_PATIENT, null, contentValues);
	}
	
	public String getPatientInfo(String healthcard){
		SQLiteDatabase db = database.getWritableDatabase();
		String[] columns = {DatabaseHelper.NAME, DatabaseHelper.HEALTHCARD, DatabaseHelper.DOB};
		String select = DatabaseHelper.HEALTHCARD + "=?";
		String[] select_args = {healthcard};
		Cursor cursor = db.query(DatabaseHelper.TABLE_PATIENT, columns, null, null, null, null, null, null);
		StringBuffer buffer = new StringBuffer();
		while(cursor.moveToNext()){
			int index1 = cursor.getColumnIndex(DatabaseHelper.HEALTHCARD);
			int index2 = cursor.getColumnIndex(DatabaseHelper.NAME); 
			int index3 = cursor.getColumnIndex(DatabaseHelper.DOB); 
			String health_card = cursor.getString(index1);
			String name = cursor.getString(index2);
			String dob = cursor.getString(index3); 
			buffer.append(health_card + " " + name + " " + dob + "\n"); 
		}
		return buffer.toString();
	}
	
	/*
	public String getAllData(SQLiteDatabase db){
		String[] columns = {DatabaseHelper.NAME};
		Cursor cursor = db.query(DatabaseHelper.TABLE1_NAME, columns, null, null, null, null, null);
		StringBuffer buffer = new StringBuffer();
		while(cursor.moveToNext()){
			int ind = cursor.getColumnIndex(DatabaseHelper.NAME);
			String name = cursor.getString(ind);
			buffer.append(name + "\n");
		}
		return buffer.toString();
	}
	
	public String[] getPatientInfo(SQLiteDatabase db, String healthcard){
		String[] columns = {DatabaseHelper.NAME, DatabaseHelper.DOB, DatabaseHelper.HEALTHCARD}; 
		String[] args = {healthcard};
		String[] info = new String[3];
		Cursor cursor = db.query(DatabaseHelper.TABLE1_NAME, columns, DatabaseHelper.HEALTHCARD+"=?", args, null, null, null);
		int index = cursor.getColumnIndex(DatabaseHelper.NAME);
		int index1 = cursor.getColumnIndex(DatabaseHelper.HEALTHCARD);
		int index2 = cursor.getColumnIndex(DatabaseHelper.DOB); 
		info[0] = cursor.getString(index);
		info[1] = cursor.getString(index1);
		info[2] = cursor.getString(index2);
		return info;
		
	}
	
	public boolean contains(SQLiteDatabase db, String healthcard){
		String[] columns = {DatabaseHelper.HEALTHCARD};
		Cursor cursor = db.query(DatabaseHelper.TABLE1_NAME, columns, null, null, null, null, null); 
		while(cursor.moveToNext()){
			int index = cursor.getColumnIndex(DatabaseHelper.HEALTHCARD); 
			if(healthcard.contentEquals(cursor.getString(index))){
				return true;
			}
		}
		return false; 
	}
	
	public void insertPatientInfoONLY(String name, String healthcard, String bday){
		SQLiteDatabase db = database.getWritableDatabase();
		ContentValues contentValues1 = new ContentValues();
		contentValues1.put(DatabaseHelper.NAME, name); 
		contentValues1.put(DatabaseHelper.HEALTHCARD, healthcard);
		contentValues1.put(DatabaseHelper.DOB, bday);
		db.insert(DatabaseHelper.TABLE1_NAME, null, contentValues1);
		
	}
	
	public long insertPatientTime(String time, String date){
		SQLiteDatabase db = database.getWritableDatabase();
		ContentValues contentValues2 = new ContentValues();
		contentValues2.put(DatabaseHelper.TIME_SEEN, time); 
		contentValues2.put(DatabaseHelper.DATE_SEEN, date);
		long id2 = db.insert(DatabaseHelper.TABLE1_NAME, null, contentValues2);
		return id2; 
	}
	public String toString(){
		return db.toString();
	}
	public long insertNurseLog(String healthcard, String temperature, String heart_rate, String sy_measure, String dy_measure, String log_time, String log_date){
		SQLiteDatabase db = database.getWritableDatabase(); 
		ContentValues contentValues3 = new ContentValues();
		contentValues3.put(DatabaseHelper.HEALTHCARD, healthcard); 
		contentValues3.put(DatabaseHelper.TEMPERATURE, temperature);
		contentValues3.put(DatabaseHelper.HEARTRATE, heart_rate);
		contentValues3.put(DatabaseHelper.SYSBP, sy_measure);
		contentValues3.put(DatabaseHelper.DYBP, dy_measure);
		contentValues3.put(DatabaseHelper.LOGTIME, log_time);
		contentValues3.put(DatabaseHelper.LOGDATE, log_date);
		long id3 = db.insert(DatabaseHelper.TABLE2_NAME, null, contentValues3);
		return id3;
	}
	public long insertPhyLog(String med, String in){
		SQLiteDatabase db = database.getWritableDatabase(); 
		ContentValues contentValues4 = new ContentValues();
		contentValues4.put(DatabaseHelper.MED, med); 
		contentValues4.put(DatabaseHelper.MEDIN, in);
		long id4 = db.insert(DatabaseHelper.TABLE2_NAME, null, contentValues4);
		return id4;
	}
	*/
	static class DatabaseHelper extends SQLiteOpenHelper{
		private static final String DATABASE_NAME = "Hospital Database";
		private static final String TABLE_PATIENT = "PATIENTTABLE";
		private static final String LOG_TABLE = "LOGTABLE";
		private static final int DATABASE_VERSION = 1; 
		private static final String UID = "_id"; 
		private static final String NAME = "Name"; 
		private static final String HEALTHCARD = "HealthCard";
		private static final String DOB = "Birthdate";  
		private static final String TEMPERATURE = "Temperature";
		private static final String HEARTRATE = "HeartRate";
		private static final String SYSBP = "SystolicBP";
		private static final String DYBP = "DiastolicBP";
		private static final String LOGTIME = "LogTime";
		private static final String LOGDATE = "LogDate";
		private static final String MED = "Medication";
		private static final String MEDIN = "MedicationInformation";
		private static final String URGENCY = "Urgency";
		private static final String TIME_SEEN = "TimeSeen";
		private static final String DATE_SEEN = "DateSeen";
		private static final String VARCHAR = " VARCHAR(100), ";
		private static final String CREATE_PATIENT = "CREATE TABLE "+TABLE_PATIENT+" ("+UID+" INTEGER PRIMARY KEY AUTOINCREMENT, "+NAME+VARCHAR+HEALTHCARD+VARCHAR+DOB+VARCHAR+URGENCY+VARCHAR+TIME_SEEN+VARCHAR+DATE_SEEN+" VARCHAR(50));";
		private static final String DROP_PATIENT = "DROP TABLE IF EXISTS " + TABLE_PATIENT;
		private static final String CREATE_LOG = "CREATE TABLE "+LOG_TABLE+" ("+HEALTHCARD+VARCHAR+TEMPERATURE+VARCHAR+HEARTRATE+VARCHAR+SYSBP+VARCHAR+DYBP+VARCHAR+LOGTIME+VARCHAR+LOGDATE+VARCHAR+MED+VARCHAR+MEDIN+" VARCHAR(100));";
		private static final String DROP_LOG = "DROP TABLE IF EXISTS " + LOG_TABLE;
		private Context context; 
		
		public DatabaseHelper(Context context){
			super(context, DATABASE_NAME, null, DATABASE_VERSION);
			this.context = context;
		}

		@Override
		public void onCreate(SQLiteDatabase db) {
			// TODO Auto-generated method stub
			try { 
				db.execSQL(CREATE_PATIENT);
				Message.message(context, "Table 1 Created");
			}catch(SQLException e){
				Message.message(context, ""+e); 
			}
			try{
				db.execSQL(CREATE_LOG);
				Message.message(context, "Table 2 Created");
			}catch(SQLException e){
				Message.message(context, ""+e);
			}
		}

		@Override
		public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
			// TODO Auto-generated method stub
			try{
				db.execSQL(DROP_PATIENT); 
				onCreate(db); 
				Message.message(context, "onUpgrade Called");
			}catch(SQLException e){
				Message.message(context, ""+e);
			}
			try{
				db.execSQL(DROP_LOG);
				onCreate(db);
				Message.message(context, "onUpgrade Called");
			}catch(SQLException e){
				Message.message(context, ""+e);
			}
		}
		
		
	}
}